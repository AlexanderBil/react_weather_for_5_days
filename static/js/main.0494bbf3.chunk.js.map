{"version":3,"sources":["Infoblock/Infoblock.js","Weather/Weather.js","App.js","reportWebVitals.js","index.js"],"names":["Infoblock","props","weatherArr","today","useState","temp","setTemp","fillsLike","setFillsLike","humid","setHumid","wind","setWind","cloud","setCloud","time","setTime","icon","setIcon","useEffect","currentDay","Date","getFullYear","getMonth","slice","toString","resRequest","item","main","toFixed","humidity","speed","weather","feels_like","dt_txt","map","hour","getHours","includes","takeInfo","className","src","alt","Weather","state","cityname","lat","lng","currentDate","getDate","currentHour","toLocaleTimeString","loading","window","confirm","navigator","geolocation","getCurrentPosition","position","latitude","coords","longitude","setState","fetch","then","data","json","console","log","list","city","name","this","infoblock","i","push","React","Component","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0494bbf3.chunk.js","sourcesContent":["import {useState, useEffect} from 'react';\r\nimport './Infoblock.css';\r\n\r\nfunction Infoblock(props){\r\n    let {weatherArr, today} = props;\r\n    const [temp, setTemp] = useState('');\r\n    const [fillsLike, setFillsLike] = useState('');\r\n    const [humid, setHumid] = useState('');\r\n    const [wind, setWind] = useState('');\r\n    const [cloud, setCloud] = useState('');\r\n    const [time, setTime] = useState();\r\n    const [icon, setIcon] = useState('');\r\n\r\n\r\nfunction takeInfo(){\r\n  let currentDay = new Date().getFullYear()+'-'+(\"0\"+(new Date().getMonth()+1)).slice(-2)+'-'+ today.toString();\r\n  \r\n\r\nfunction resRequest(item){\r\n    setTemp((item.main.temp - 272).toFixed(0) +'℃');\r\n        setHumid(item.main.humidity);\r\n        setWind(item.wind.speed);\r\n        setCloud(item.weather[0]['description']);\r\n        setFillsLike((item.main.feels_like - 272).toFixed(0) + '℃');\r\n        setTime(item.dt_txt.slice(0, 10));\r\n        setIcon(`https://openweathermap.org/img/wn/${item.weather[0].icon}@2x.png`);\r\n  }\r\n\r\n\r\nweatherArr.map((item) => {\r\nlet date = new Date();\r\nlet hour = date.getHours();\r\n\r\n\r\nswitch(true){\r\n  case hour >= 0 && hour < 6:\r\n    if(item.dt_txt.includes(currentDay) && item.dt_txt.includes('03:00:00')){\r\n      resRequest(item);\r\n    }\r\n      break;\r\n  case hour >= 6 && hour < 9:\r\n    if(item.dt_txt.includes(currentDay) && item.dt_txt.includes('06:00:00')){\r\n      resRequest(item);\r\n    }\r\n      break;\r\n  case hour >= 9 && hour < 12:\r\n    if(item.dt_txt.includes(currentDay) && item.dt_txt.includes('09:00:00')){\r\n      resRequest(item);\r\n    }\r\n      break;\r\n  case hour >= 12 && hour < 18:\r\n    if(item.dt_txt.includes(currentDay) && item.dt_txt.includes('15:00:00')){\r\n      resRequest(item);\r\n    }\r\n      break;\r\n  case hour >= 18 && hour < 21:\r\n    if(item.dt_txt.includes(currentDay) && item.dt_txt.includes('18:00:00')){\r\n      resRequest(item);\r\n    }\r\n      break;\r\n  case hour >= 21 && hour < 24:\r\n    if(item.dt_txt.includes(currentDay) && item.dt_txt.includes('21:00:00')){\r\n      resRequest(item);\r\n    }\r\n      break;\r\n}\r\n  });\r\n}\r\n\r\n    useEffect(() => {\r\n         takeInfo()\r\n      });\r\n\r\n       return(\r\n        <div className=\"infoblock\" >\r\n            <div className = \"time\">{time}</div>\r\n            <div className = \"icon\"><img src={icon} alt=\"\" /></div>\r\n             <div className = \"temp\">{temp}</div>\r\n             <div className = \"like\">Fills like: {fillsLike}</div>\r\n             <div className = \"humid\">Humidity: {humid}%</div>\r\n             <div className = \"wind\">Wind speed: {wind} m/sec</div>\r\n             <div className = \"cloud\">Сloudiness: {cloud}</div>\r\n        </div>\r\n       )\r\n  }\r\n  \r\n  export {Infoblock}","import React from 'react';\nimport './Weather.css';\nimport {Infoblock} from '../Infoblock/Infoblock';\n\nclass Weather extends React.Component{\n  constructor(props){\n    super (props);\n    this.state = {\n      weather: [],\n      cityname: \"\",\n      lat: 0,\n      lng: 0,\n      currentDate: (\"0\"+new Date().getDate()).slice(-2),\n      currentHour: new Date().toLocaleTimeString().slice(0,-3),\n      loading: true\n    }\n  }\n\n\ncomponentDidMount() {\n\nconst startLoc = () => {\n  const getLatLng = position => {\n    const latitude = position.coords.latitude;\n    const longitude = position.coords.longitude;\n    this.setState({\n      lat: latitude,\n      lng: longitude\n    })\n\n    fetch(`https://api.openweathermap.org/data/2.5/forecast?lat=${this.state.lat}&lon=${this.state.lng}&appid=b55fa2065395d8fb34e5fcd609ccf1c0`)\n    .then(data => data.json())\n    .then(data => {\n      console.log(data.list);\n      this.setState({weather: data.list})\n      this.setState({cityname: data.city.name})\n    }) \n  }\n  navigator.geolocation.getCurrentPosition(getLatLng);\n}\n\n  const clean = () => {\n    this.setState({loading: false})\n  }\n\nconst getLocation = window.confirm(\"Can I get you location?\");\nif (getLocation){\n    startLoc();\n}else{\n  clean()\n}\n}\n\n\n  render(){\n    const {weather, cityname, currentDate, currentHour, loading} = this.state;\n    const infoblock = [];\n    for(let i = 0; i < 5; i++){\n    let today = +currentDate;\n     today+=i\n     infoblock.push(<Infoblock key = {i} weatherArr = {weather} today = {today}/>)\n    }\n    \n    return(\n    <div className = 'weather-main'>\n      <div className = \"title\">Temperature for 5 days at the current time ({currentHour})</div>\n      {\n        loading ? ( <div>\n                <div className = \"cityname\">Town {cityname}</div>\n                <div className=\"weather_report\">{infoblock}</div>\n                    </div>\n                  ) :  <span className =\"sorry\">Sorry, the request is not confirmed</span>\n             }\n    </div>\n    )\n  }\n}\n\nexport default Weather;\n","import React from 'react';\nimport './App.css';\n\n\nimport Weather from './Weather/Weather';\n\n\nclass App extends React.Component{\n  constructor(props){\n    super (props);\n  }\n  render(){\n    return(\n     <div className=\"wrapper\">\n        <Weather/>\n     </div>\n    )\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}